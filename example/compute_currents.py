"""
    Example script in which different types of currents and dimensions are computed.

    The phase space points are generated using lips and syngular:
        https://gdelaurentis.github.io/lips/
        https://gdelaurentis.github.io/syngular/

"""

import os

# Disable Tensorflow logging
os.environ.setdefault("TF_CPP_MIN_LOG_LEVEL", "4")
# If more than a GPU is available, use only one
os.environ.setdefault("CUDA_VISIBLE_DEVICES", "0")

import numpy as np
import tensorflow as tf

from bgtrees import compute_current_j_mu, generate_batch_points
from bgtrees.finite_gpufields import ff_dot_product

MUL = 4
DIM = 4
BAT = 3

print(
    """

Initialization finished, starting script demonstrating BG-Trees
for several different configurations.

 ▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄       ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀       ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ 
▐░▌       ▐░▌▐░▌                    ▐░▌     ▐░▌       ▐░▌▐░▌          ▐░▌          ▐░▌          
▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▄▄▄▄▄▄▄▄           ▐░▌     ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ 
▐░░░░░░░░░░▌ ▐░▌▐░░░░░░░░▌          ▐░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░█▀▀▀▀▀▀▀█░▌▐░▌ ▀▀▀▀▀▀█░▌          ▐░▌     ▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀█░▌
▐░▌       ▐░▌▐░▌       ▐░▌          ▐░▌     ▐░▌     ▐░▌  ▐░▌          ▐░▌                    ▐░▌
▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄█░▌          ▐░▌     ▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄█░▌
▐░░░░░░░░░░▌ ▐░░░░░░░░░░░▌          ▐░▌     ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
 ▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀            ▀       ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀ 

"""
)


# Example runnning with arbitrary precision numbers generated by lips
print("Running with arbitrary precision...")
lmoms_mpm, lpols_mpm = generate_batch_points(MUL, DIM, BAT, "float")
current_mpm = compute_current_j_mu(lmoms_mpm[:, 1:], lpols_mpm[:, 1:], put_propagator=False)
res_mpm = np.einsum("rm, rm->r", lpols_mpm[:, 0], current_mpm)
print("Success!")

# Example running with finite fields generated by lips
if tf.config.list_physical_devices("GPU"):
    print("Running with finite fields in GPU")
else:
    print("Running with finite fields in CPU")
lmoms_ff, lpols_ff = generate_batch_points(MUL, DIM, BAT, "ff")
current_ff = compute_current_j_mu(lmoms_ff[:, 1:], lpols_ff[:, 1:], put_propagator=False)
res_ff = ff_dot_product(lpols_ff[:, 0], current_ff)
print("Success!")

# It is also possible to manually input a set of momenta and polarization vectors
print("Running with numpy complex numbers")
lmoms = np.array(
    [[[0.0, 0.0, 500.0, 500.0], [0.0, 0.0, -500.0, 500.0], [248, 139, 399, 299.337], [-248, -139, -399, 299.337]]],
    dtype=complex,
)

lpols = np.array(
    [
        [
            [-1.72420767 - 0.44130993j, -1.0 + 0.0j, -1.72420767 - 0.44130993j, 0.0 - 1.0j],
            [-0.5443182 + 0.13931792j, -1.0 + 0.0j, 0.5443182 - 0.13931792j, 0.0 + 1.0j],
            [
                -2.18943516 - 1.78175629j,
                -1.15639595 - 0.45105746j,
                -1.88418694 - 1.79476206j,
                -0.39523959 + 0.00563804j,
            ],
            [0.06175615 + 0.40719244j, -0.39821213 + 0.27406914j, 0.29218246 + 0.28671646j, -0.09934956 - 0.50841465j],
        ]
    ]
)
current = compute_current_j_mu(lmoms[:, 1:], lpols[:, 1:], put_propagator=False)
res = np.einsum("rm, rm->r", lpols[:, 0], current)
print("Success!")

# Pass tensorflow quantities instead of numpy arrays
print("Running with TensorFlow complex numbers")
lmoms_tf = tf.cast(lmoms, dtype=tf.complex128)
lpols_tf = tf.cast(lpols, dtype=tf.complex128)
current_tf = compute_current_j_mu(lmoms_tf[:, 1:], lpols_tf[:, 1:], put_propagator=False)
res_tf = np.einsum("rm, rm->r", lpols_tf[:, 0], current_tf)
print("Success!")
